custom: # Custom properties to make workflows cleaner
  scripts:
    - &use_project_build_number
      name: Use project build number
      script: |
        echo "BUILD_NR=$PROJECT_BUILD_NUMBER" >> $CM_ENV
    - &use_workflow_build_number
      name: Use workflow build number
      script: |
        echo "BUILD_NR=$BUILD_NUMBER" >> $CM_ENV
    - &analyze
      name: Analyzing the codebase
      script: |
        ln -s "${FLUTTER_ROOT}/bin/dart" /usr/local/bin/dart
        dart format --fix --set-exit-if-changed $(find lib -name "*.dart" -not \( -name "pigeon.dart" \) )
        if [ $? -eq 1 ]
        then
            exit 1
        fi
        dart analyze . --fatal-infos --fatal-warnings
    - &set_version_string
      name: Updating versioning information for this build
      script: |
        # get version tag
        version_tag=$(git describe --tags --abbrev=0 --match "v*")
        version_tag="$(echo $version_tag | sed 's/^v//g')"
        # set variables in .env file for the app
        sed -i -e "s/TAG=/TAG=$version_tag/g" .env
        # set version in pubspec.yaml for showing it in Codemagic
        sed -i -e "s/^version:.*//g" pubspec.yaml
        echo "version: $version_tag" >> pubspec.yaml
        # Prepare the version name for a Sentry release
        sentry_version="$BUNDLE_ID@$version_tag+$BUILD_NR"
        echo $sentry_version > SENTRY_VERSION
        # Fix CFBundleVersion for iOS
        version_tag=$(echo $version_tag | cut -f1 -d "-")
        sed -i -e "s/<string>\$(FLUTTER_BUILD_NAME)<\/string>/<string>${version_tag}<\/string>/g" ios/Runner/Info-Release.plist
    - &set_version_string_for_merge_request
      name: Updating versioning information based on the merge request
      script: |
        # get version tag
        version_tag=$(git describe --tags --abbrev=0)
        version_tag="$(echo $version_tag | sed 's/^v//g')"
        escaped_branch=$(echo "$FCI_BRANCH" | tr / -)
        # set variables in .env file for the app
        sed -i -e "s/MERGE_REQUEST=/MERGE_REQUEST=${GITLAB_MERGE_REQUEST_IID}/g" .env
        sed -i -e "s/BRANCH=/BRANCH=${escaped_branch}/g" .env
        # set version in pubspec.yaml for showing it in Codemagic
        sed -i -e "s/^version:.*//g" pubspec.yaml
        echo "version: $version_tag-MR.$GITLAB_MERGE_REQUEST_IID-$escaped_branch" >> pubspec.yaml
        # Prepare the version name for a Sentry release
        sentry_version="$BUNDLE_ID@$version_tag-$escaped_branch+$BUILD_NR"
        echo $sentry_version > SENTRY_VERSION
        # Fix CFBundleVersion for iOS
        version_tag=$(echo $version_tag | cut -f1 -d "-")
        sed -i -e "s/<string>\$(FLUTTER_BUILD_NAME)<\/string>/<string>${version_tag}<\/string>/g" ios/Runner/Info-Release.plist
    - &set_version_string_to_most_recent_tag
      name: Updating versioning information using the most recent tag
      script: |
        # get version tag
        version_tag=$(git describe --tags --abbrev=0)
        version_tag="$(echo $version_tag | sed 's/^v//g')"
        escaped_branch=$(echo "$FCI_BRANCH" | tr / -)
        # set variables in .env file for the app
        sed -i -e "s/BRANCH=/BRANCH=${escaped_branch}/g" .env
        # set version in pubspec.yaml for showing it in Codemagic
        sed -i -e "s/^version:.*//g" pubspec.yaml
        echo "version: $version_tag-$escaped_branch" >> pubspec.yaml
        # Prepare the version name for a Sentry release
        sentry_version="$BUNDLE_ID@$version_tag-$escaped_branch+$BUILD_NR"
        echo $sentry_version > SENTRY_VERSION
        # Fix CFBundleVersion for iOS
        version_tag=$(echo $version_tag | cut -f1 -d "-")
        sed -i -e "s/<string>\$(FLUTTER_BUILD_NAME)<\/string>/<string>${version_tag}<\/string>/g" ios/Runner/Info-Release.plist
    - &set_up_env_file
      name: Configuring .env file
      script: |
        #!/bin/sh
        set -e # exit on first failed command set
        cp .env.example .env
        sed -i -e "s/LOGENTRIES_ANDROID_TOKEN=/LOGENTRIES_ANDROID_TOKEN=${LOGENTRIES_ANDROID_TOKEN}/g" .env
        sed -i -e "s/LOGENTRIES_IOS_TOKEN=/LOGENTRIES_IOS_TOKEN=${LOGENTRIES_IOS_TOKEN}/g" .env
        sed -i -e "s/COMMIT_HASH=/COMMIT_HASH=${FCI_COMMIT}/g" .env
        sed -i -e "s|SENTRY_DSN=|SENTRY_DSN=${SENTRY_DSN}|g" .env
        sed -i -e "s|SANDBOX=|SANDBOX=${ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS}|g" .env
        sed -i -e "s|SEGMENT_ANDROID_KEY=|SEGMENT_ANDROID_KEY=${SEGMENT_ANDROID_WRITE_KEY}|g" .env
        sed -i -e "s|SEGMENT_IOS_KEY=|SEGMENT_IOS_KEY=${SEGMENT_IOS_WRITE_KEY}|g" .env
        sed -i -e "s|FEATURE_COLLEAGUE_LIST=|FEATURE_COLLEAGUE_LIST=${FEATURE_COLLEAGUE_LIST}|g" .env
        sed -i -e "s|FEATURE_OPENING_HOURS_BASIC=|FEATURE_OPENING_HOURS_BASIC=${FEATURE_OPENING_HOURS_BASIC}|g" .env
    - &prepare_release_notes_from_files
      name: Preparing the release notes from the release notes on the file system
      script: dart utils/ci/codemagic/prepare_release_notes.dart
    - &track_new_version
      name: Track the release of a new version
      script: dart utils/ci/codemagic/track_new_version.dart
    - &flutter_pub_get
      name: Installing flutter dependencies and generate code
      script: |
        eval `ssh-agent -s`
        echo "$FONT_AWESOME_KEY" | tr -d '\r' | ssh-add -
        flutter packages pub get
        flutter pub run build_runner build
        flutter pub run pigeon --input utils/pigeon/scheme.dart --dart_out lib/app/util/pigeon.dart --objc_header_out ios/Runner/pigeon.h --objc_source_out ios/Runner/pigeon.m --java_out android/app/src/main/java/com/voipgrid/vialer/Pigeon.java --java_package com.voipgrid.vialer
    - &release_to_sentry
      name: Create a new release in Sentry
      script: |
        # Extract the Sentry version from file
        sentry_version=$(cat SENTRY_VERSION)
        if [ -z "$sentry_version" ]; then
          # Use Sentrys proposed version name as a fallback
          proposed_version=$(sentry-cli releases propose-version)
          sentry_version=$proposed_version
        fi

        # Report the new version to Sentry, include git commits and possibly finalize the release.
        # By finalizing the release Sentry issues marked as 'Resolved in next release' mean this
        # release.
        sentry-cli releases new "$sentry_version"
        sentry-cli releases set-commits "$sentry_version" --auto --ignore-missing
        if [ $FINALIZE_SENTRY_RELEASE = true ] ; then
          sentry-cli releases finalize "$sentry_version"
        fi
    - &flutter_test
      name: Running tests
      script: |
        flutter test
    - &build_aab
      name: Building app bundle (.aab) for Android
      script: |
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
        echo $ANDROID_FIREBASE_SECRET | base64 --decode > $FCI_BUILD_DIR/android/app/google-services.json
        echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
        flutter build appbundle --release --target=lib/app/main.dart --build-number=$BUILD_NR -v --dart-define BRAND=$BRAND --dart-define SEGMENT_ANDROID_KEY=$SEGMENT_ANDROID_WRITE_KEY
    - &build_universal_apk_from_aab
      name: Building "Universal APK" (.apk) for Android
      script: |
        android-app-bundle build-universal-apk \
        --ks $FCI_KEYSTORE_PATH \
        --ks-pass $FCI_KEYSTORE_PASSWORD \
        --ks-key-alias $FCI_KEY_ALIAS \
        --key-pass $FCI_KEY_PASSWORD
    - &update_ios_signing_for_current_brand
      name: Updating iOS project files to use the appropriate signing information for the current brand
      script: |
        #!/usr/bin/env python3
        import os
        import re

        iosTeamId = os.getenv('IOS_TEAM_ID')
        iosBundleId = os.getenv('BUNDLE_ID')

        if not isinstance(iosTeamId, str) or not isinstance(iosBundleId, str):
          raise Exception("IOS_TEAM_ID and BUNDLE_ID environment variables must be set")

        FILE_PATH = "ios/Runner.xcodeproj/project.pbxproj"
        REPLACEMENTS = {
            iosTeamId: [
                "(DevelopmentTeam = )([A-Z0-9]+)(;)",
                "(DEVELOPMENT_TEAM = )([A-Z0-9]+)(;)",
            ],
            iosBundleId: [
                "(PRODUCT_BUNDLE_IDENTIFIER = )(.+)(;)",
            ]
        }

        pbxprojFile = open(FILE_PATH, "r")
        contents = "".join(pbxprojFile.readlines())
        pbxprojFile.close

        for replacement, candidates in REPLACEMENTS.items():
            for candidate in candidates:
                contents = re.sub(
                    r'' + candidate,
                    r'\1' + replacement + r'\3',
                    contents
                )


        pbxprojFile = open(FILE_PATH, "w")
        pbxprojFile.write("".join(contents))
        pbxprojFile.close
    - &build_ipa
      name: Building application (.ipa) for iOS
      script: |
        flutter pub get
        pod repo update
        export PATH="$PATH:/Users/builder/programs/flutter/bin/cache/dart-sdk/bin"
        cd ios/ && pod install && cd ..
        keychain initialize
        app-store-connect fetch-signing-files $BUNDLE_ID \
        --type $IOS_SIGNING_TYPE \
        --create
        keychain add-certificates
        xcode-project use-profiles
        flutter build ipa --release \
        --target=lib/app/main.dart \
        --export-options-plist=/Users/builder/export_options.plist \
        --build-number=$BUILD_NR \
        --dart-define BRAND=$BRAND \
        --dart-define SEGMENT_IOS_KEY=$SEGMENT_IOS_WRITE_KEY \
    - &prepare_environment_for_integration_testing
      name: Preparing environment for integration testing
      script: |
        sed -i -e "s/IN_TEST\=*/IN_TEST\=true/g" .env
        sed -i -e "s/TEST_USER_1_EMAIL\=*/TEST_USER_1_EMAIL\=$TEST_USER_1_EMAIL/g" .env
        sed -i -e "s/TEST_USER_1_PASSWORD\=*/TEST_USER_1_PASSWORD\=$TEST_USER_1_PASSWORD/g" .env
        sed -i -e "s/TEST_USER_2_EMAIL\=*/TEST_USER_2_EMAIL\=$TEST_USER_2_EMAIL/g" .env
        sed -i -e "s/TEST_USER_2_PASSWORD\=*/TEST_USER_2_PASSWORD\=$TEST_USER_2_PASSWORD/g" .env
        sed -i -e "s/TEST_USER_WITHOUT_APP_ACCOUNT_EMAIL\=*/TEST_USER_WITHOUT_APP_ACCOUNT_EMAIL\=$TEST_USER_WITHOUT_APP_ACCOUNT_EMAIL/g" .env
        sed -i -e "s/TEST_USER_WITHOUT_APP_ACCOUNT_PASSWORD\=*/TEST_USER_WITHOUT_APP_ACCOUNT_PASSWORD\=$TEST_USER_WITHOUT_APP_ACCOUNT_PASSWORD/g" .env
    - &run_integration_tests_ios
      name: Running integration tests on iOS emulator
      script: |
        #!/usr/bin/env zsh
        set -e # Ensures the script exits if any commands fail to execute
        if [ ! -f "build/ios/ipa/Vialer.ipa" ]; then
            echo "Error: You must run the build_ipa script before running iOS integration tests"
            exit 1
        fi
        brew tap wix/brew && brew install applesimutils
        xcrun simctl shutdown all
        latestRuntime="$(xcrun simctl list runtimes | grep -o -E 'iOS [0-9.]*' | sort -r | head -n1 | tr -d '[:space:]')"
        testDevice=$(xcrun simctl create integration-test-simulator com.apple.CoreSimulator.SimDeviceType.iPhone-14-Pro $latestRuntime)
        xcrun simctl boot $testDevice
        for filename in integration_test/tests/**/*.dart; do
          flutter install --use-application-binary=build/ios/ipa/Vialer.ipa -d $testDevice
          applesimutils --booted --bundle com.voipgrid.vialer --setPermissions contacts=YES,microphone=YES,notifications=YES
          flutter drive -t "$filename" --driver test_driver/integration_test.dart -d $testDevice
        done
    - &update_gitlab_merge_request_with_build_url
      name: Updating the Merge Request in Gitlab with a link to this build
      script: |
        dart utils/ci/codemagic/update_gitlab_merge_request_with_build_link.dart \
        --merge-request-id=$GITLAB_MERGE_REQUEST_IID \
        --gitlab-api-token=$GITLAB_API_TOKEN \
        --build-number=$PROJECT_BUILD_NUMBER \
        --project-id=$FCI_PROJECT_ID \
        --build-id=$FCI_BUILD_ID
    - &set_testflight_release_notes_for_main
      name: Preparing "What to test" for TestFlight
      script: |
        echo '[{"language":"en-US","text":"Main"},{"language":"nl-NL","text":"Main"}]' > release_notes.json
    - &call_zapier_production_build_webhook
      name: Calling our Zapier webhook to inform of a new production build
      ignore_failure: true
      script: |
        curl "https://hooks.zapier.com/hooks/catch/1394555/blav33z?build_id=${CM_BUILD_ID}"
  config: &config # Default configuration that can be applied to all normal workflows
    max_build_duration: 90
    instance_type: mac_mini_m1
    environment: &config_environment
      flutter: 3.7.12
      # This has to be 14.2 for our integration tests to work, it should be changed to latest
      # when the tooling supports xCode 14.3.
      xcode: 14.2
      cocoapods: 1.11.3
    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
  brand_config: # Specific configuration that should be applied to a workflow when building for this brand
    vialer_env_vars: &brand_config_vialer_env_vars
      BRAND: vialer
      BUNDLE_ID: "com.voipgrid.vialer"
    staging_env_vars: &brand_config_staging_env_vars
      BRAND: vialerStaging
      BUNDLE_ID: "com.voipgrid.vialer"
    voys_env_vars: &brand_config_voys_env_vars
      BRAND: voys
      BUNDLE_ID: "com.voys.app"
    verbonden_env_vars: &brand_config_verbonden_env_vars
      BRAND: verbonden
      BUNDLE_ID: "nl.verbonden.app"
    annabel_env_vars: &brand_config_annabel_env_vars
      BRAND: annabel
      BUNDLE_ID: "com.bellenmetannabel.app"
  # Production and beta environment variables.
  release_env_vars: &release_env_vars
    IOS_SIGNING_TYPE: "IOS_APP_STORE"
    ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
    FINALIZE_SENTRY_RELEASE: "true"
  defaults: # Default sections that can be reused between workflows to cover common use-cases
    artifacts: &defaults_artifacts
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log

    production_trigger: &production_was_tagged
      events:
        - tag
      tag_patterns:
        - pattern: 'v*'
          include: true
        - pattern: '*beta*'
          include: false
        - pattern: '*alpha*'
          include: false
        - pattern: '*internal*'
          include: false

    beta_trigger: &beta_was_tagged
      events:
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: main
          include: true
          source: false
      tag_patterns:
        - pattern: '*beta*'
          include: true

    # We expect internal preview builds to be tagged as (e.g.) [v7.8.0-internal-preview.01],
    # however we also want to release all builds to this internal preview testing so users
    # can continue to stay enrolled and get all releases.
    internal_preview_trigger: &internal_preview_was_tagged
      events:
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: main
          include: true
          source: false
      tag_patterns:
        - pattern: '*'
          include: true

    publish_for_production: &publish_for_production
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_app_store: true
        submit_to_testflight: true
        release_type: MANUAL
        beta_groups:
          - Beta Testers
          - External Testers
        cancel_previous_submissions: true
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: production
        in_app_update_priority: 1

    publish_for_beta: &publish_for_beta
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        beta_groups:
          - Beta Testers
          - External Testers
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: beta
        in_app_update_priority: 5

    publish_for_internal_preview: &publish_for_internal_preview
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        beta_groups:
          - Internal Preview
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        in_app_update_priority: 5

workflows:
  main: &main_workflow
    name: main
    <<: *config
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_vialer_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_DEVELOPMENT"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "true"
        FINALIZE_SENTRY_RELEASE: "false"
    triggering:
      cancel_previous_builds: true
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
    scripts:
      - *use_workflow_build_number
      - *set_up_env_file
      - *set_version_string_to_most_recent_tag
      - *flutter_pub_get
      - *analyze
      - *flutter_test
      - *build_aab
      - *build_universal_apk_from_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *set_testflight_release_notes_for_main
      - *release_to_sentry
    artifacts: *defaults_artifacts

  release-candidate:
    name: Release Candidate
    <<: *main_workflow
    triggering:
      events:
        - push
      branch_patterns:
        # Only matching actual release branches.
        - pattern: "release/v*(0|1|2|3|4|5|6|7|8|9|.)"
    when:
      changeset:
        # So we avoid triggering new RCs when release notes are added
        includes:
          - 'lib/**'
          - 'android/**'
          - 'ios/**'
          - 'pubspec.yaml'
    publishing:
      slack:
        channel: '#vialer_mobile_release_candidates'
        notify_on_build_start: false
        notify:
          success: true
          failure: false

  # Run automatically via `.gitlab-ci.yml`
  gitlab-ci-merge-train:
    name: Gitlab CI Merge Train
    <<: *main_workflow
    scripts:
      - *use_workflow_build_number
      - *set_up_env_file
      - *set_version_string_for_merge_request
      - *flutter_pub_get
      - *analyze
      - *flutter_test
      - *update_ios_signing_for_current_brand
      - *prepare_environment_for_integration_testing
      - *build_ipa
      - *run_integration_tests_ios
      - *build_aab
      - *build_universal_apk_from_aab
      - *release_to_sentry
    triggering:
      events: [ ]

  # Run automatically via `.gitlab-ci.yml`
  gitlab-ci-merge-request:
    name: Gitlab CI Merge Request
    <<: *main_workflow
    scripts:
      - *use_workflow_build_number
      - *set_up_env_file
      - *set_version_string_for_merge_request
      - *flutter_pub_get
      - *analyze
      - *flutter_test
      - *build_aab
      - *build_universal_apk_from_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *update_gitlab_merge_request_with_build_url
      - *release_to_sentry
    triggering:
      events: [ ]
    publishing:
      slack:
        channel: '#vialer_mobile_ci'
        notify_on_build_start: false
        notify:
          success: true
          failure: true

  run-integration-tests:
    name: Run Integration Tests
    <<: *main_workflow
    scripts:
      - *use_workflow_build_number
      - *set_up_env_file
      - *set_version_string_for_merge_request
      - *flutter_pub_get
      - *analyze
      - *flutter_test
      - *update_ios_signing_for_current_brand
      - *prepare_environment_for_integration_testing
      - *build_ipa
      - *run_integration_tests_ios
    triggering:
      events: [ ]

  staging:
    name: Staging
    <<: *main_workflow
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_staging_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_DEVELOPMENT"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "true"
        FINALIZE_SENTRY_RELEASE: "false"

  production-vialer: &production_workflow
    name: Release Vialer to Production
    <<: *config
    environment:
      groups:
        - configuration
        - production_diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *release_env_vars
        <<: *brand_config_vialer_env_vars
    triggering: *production_was_tagged
    artifacts: *defaults_artifacts
    scripts:
      - *use_project_build_number
      - *set_up_env_file
      - *set_version_string
      - *flutter_pub_get
      - *analyze
      - *prepare_release_notes_from_files
      - *flutter_test
      - *build_aab
      - *build_universal_apk_from_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *release_to_sentry
      - *track_new_version
      - *call_zapier_production_build_webhook
    publishing: *publish_for_production

  production-voys:
    name: Release Voys to Production
    <<: *production_workflow
    environment:
      groups:
        - configuration
        - production_diagnostics
        - voys_android_firebase
        - voys_playstore_credentials
        - voys_upload_keystore_credentials
        - voys_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *release_env_vars
        <<: *brand_config_voys_env_vars

  production-verbonden:
    name: Release Verbonden to Production
    <<: *production_workflow
    environment:
      groups:
        - configuration
        - production_diagnostics
        - verbonden_android_firebase
        - verbonden_playstore_credentials
        - verbonden_upload_keystore_credentials
        - verbonden_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *release_env_vars
        <<: *brand_config_verbonden_env_vars

  production-annabel:
    name: Release ANNAbel to Production
    <<: *production_workflow
    environment:
      groups:
        - configuration
        - production_diagnostics
        - annabel_android_firebase
        - annabel_playstore_credentials
        - annabel_upload_keystore_credentials
        - annabel_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *release_env_vars
        <<: *brand_config_annabel_env_vars

  beta-vialer: &beta_workflow
    name: Vialer Beta
    <<: *config
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_vialer_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_STORE"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
        FINALIZE_SENTRY_RELEASE: "true"
    artifacts: *defaults_artifacts
    triggering: *beta_was_tagged
    scripts:
      - *use_project_build_number
      - *set_up_env_file
      - *set_version_string
      - *flutter_pub_get
      - *analyze
      - *prepare_release_notes_from_files
      - *flutter_test
      - *build_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *release_to_sentry
    publishing: *publish_for_beta

  beta-voys:
    name: Voys Beta
    <<: *beta_workflow
    environment:
      groups:
        - configuration
        - diagnostics
        - voys_android_firebase
        - voys_playstore_credentials
        - voys_upload_keystore_credentials
        - voys_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_voys_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_STORE"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
        FINALIZE_SENTRY_RELEASE: "true"

  beta-verbonden:
    name: Verbonden Beta
    <<: *beta_workflow
    environment:
      groups:
        - configuration
        - diagnostics
        - verbonden_android_firebase
        - verbonden_playstore_credentials
        - verbonden_upload_keystore_credentials
        - verbonden_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *release_env_vars
        <<: *brand_config_verbonden_env_vars

  beta-annabel:
    name: ANNAbel Beta
    <<: *beta_workflow
    environment:
      groups:
        - configuration
        - diagnostics
        - annabel_android_firebase
        - annabel_playstore_credentials
        - annabel_upload_keystore_credentials
        - annabel_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *release_env_vars
        <<: *brand_config_annabel_env_vars

  internal-preview-vialer:
    name: Internal Preview (Vialer)
    <<: *config
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_vialer_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_STORE"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
        FINALIZE_SENTRY_RELEASE: "true"
    artifacts: *defaults_artifacts
    triggering: *internal_preview_was_tagged
    scripts:
      - *use_project_build_number
      - *set_up_env_file
      - *set_version_string
      - *flutter_pub_get
      - *analyze
      - *build_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *release_to_sentry
    publishing: *publish_for_internal_preview

  # Generate production .aab/.ipa files, these are for manually uploading.
  production-artifacts-vialer:
    name: Generate Vialer production artifacts for manual upload
    <<: *config
    environment:
      groups:
        - configuration
        - production_diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *release_env_vars
        <<: *brand_config_vialer_env_vars
    artifacts: *defaults_artifacts
    scripts:
      - *use_project_build_number
      - *set_up_env_file
      - *set_version_string
      - *flutter_pub_get
      - *analyze
      - *flutter_test
      - *build_aab
      #- *update_ios_signing_for_current_brand
      #- *build_ipa
    publishing: { }

  main-verbonden:
    name: Build a version of the app with Verbonden theming
    <<: *config
    environment:
      groups:
        - configuration
        - diagnostics
        - verbonden_android_firebase
        - verbonden_upload_keystore_credentials
        - verbonden_playstore_credentials
        - verbonden_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_verbonden_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_DEVELOPMENT"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "true"
        FINALIZE_SENTRY_RELEASE: "false"
    scripts:
      - *use_workflow_build_number
      - *set_up_env_file
      - *set_version_string_to_most_recent_tag
      - *flutter_pub_get
      - *analyze
      - *flutter_test
      - *build_aab
      - *build_universal_apk_from_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *set_testflight_release_notes_for_main
      - *release_to_sentry
    artifacts: *defaults_artifacts