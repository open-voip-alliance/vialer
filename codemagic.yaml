custom: # Custom properties to make workflows cleaner
  scripts:
    - &analyze
      name: Analyzing the codebase
      script: |
        ln -s "${FLUTTER_ROOT}/bin/dart" /usr/local/bin/dart
        dart format -o none --fix --set-exit-if-changed lib/
        dart analyze . --fatal-infos --fatal-warnings
    - &set_version_string
      name: Updating versioning information for this build
      script: |
        # get version tag
        version_tag=$(git describe --tags --abbrev=0 --match "*beta*")
        version_tag="$(echo $version_tag | sed 's/^v//g')"
        # set variables in .env file for the app
        sed -i -e "s/TAG=/TAG=$version_tag/g" .env
        # set version in pubspec.yaml for showing it in Codemagic
        sed -i -e "s/^version:.*//g" pubspec.yaml
        echo "version: $version_tag" >> pubspec.yaml
        # Prepare the version name for a Sentry release
        sentry_version="$BUNDLE_ID@$version_tag+$PROJECT_BUILD_NUMBER"
        echo $sentry_version > SENTRY_VERSION
        # Fix CFBundleVersion for iOS
        version_tag=$(echo $version_tag | cut -f1 -d "-")
        sed -i -e "s/<string>\$(FLUTTER_BUILD_NAME)<\/string>/<string>${version_tag}<\/string>/g" ios/Runner/Info-Release.plist
    - &set_version_string_for_merge_request
      name: Updating versioning information based on the merge request
      script: |
        # get version tag
        version_tag=$(git describe --tags --abbrev=0)
        version_tag="$(echo $version_tag | sed 's/^v//g')"
        escaped_branch=$(echo "$FCI_BRANCH" | tr / -)
        # set variables in .env file for the app
        sed -i -e "s/MERGE_REQUEST=/MERGE_REQUEST=${GITLAB_MERGE_REQUEST_IID}/g" .env
        sed -i -e "s/BRANCH=/BRANCH=${escaped_branch}/g" .env
        # set version in pubspec.yaml for showing it in Codemagic
        sed -i -e "s/^version:.*//g" pubspec.yaml
        echo "version: $version_tag-MR.$GITLAB_MERGE_REQUEST_IID-$escaped_branch" >> pubspec.yaml
        # Prepare the version name for a Sentry release
        sentry_version="$BUNDLE_ID@$version_tag-$escaped_branch+$PROJECT_BUILD_NUMBER"
        echo $sentry_version > SENTRY_VERSION
        # Fix CFBundleVersion for iOS
        version_tag=$(echo $version_tag | cut -f1 -d "-")
        sed -i -e "s/<string>\$(FLUTTER_BUILD_NAME)<\/string>/<string>${version_tag}<\/string>/g" ios/Runner/Info-Release.plist
    - &set_version_string_to_most_recent_tag
      name: Updating versioning information using the most recent tag
      script: |
        # get version tag
        version_tag=$(git describe --tags --abbrev=0)
        version_tag="$(echo $version_tag | sed 's/^v//g')"
        escaped_branch=$(echo "$FCI_BRANCH" | tr / -)
        # set variables in .env file for the app
        sed -i -e "s/BRANCH=/BRANCH=${escaped_branch}/g" .env
        # set version in pubspec.yaml for showing it in Codemagic
        sed -i -e "s/^version:.*//g" pubspec.yaml
        echo "version: $version_tag-$escaped_branch" >> pubspec.yaml
        # Prepare the version name for a Sentry release
        sentry_version="$BUNDLE_ID@$version_tag-$escaped_branch+$PROJECT_BUILD_NUMBER"
        echo $sentry_version > SENTRY_VERSION
        # Fix CFBundleVersion for iOS
        version_tag=$(echo $version_tag | cut -f1 -d "-")
        sed -i -e "s/<string>\$(FLUTTER_BUILD_NAME)<\/string>/<string>${version_tag}<\/string>/g" ios/Runner/Info-Release.plist
    - &set_up_env_file
      name: Configuring .env file with diagnostics keys
      script: |
        #!/bin/sh
        set -e # exit on first failed command set
        cp .env.example .env
        sed -i -e "s/LOGENTRIES_ANDROID_TOKEN=/LOGENTRIES_ANDROID_TOKEN=${LOGENTRIES_ANDROID_TOKEN}/g" .env
        sed -i -e "s/LOGENTRIES_IOS_TOKEN=/LOGENTRIES_IOS_TOKEN=${LOGENTRIES_IOS_TOKEN}/g" .env
        sed -i -e "s/COMMIT_HASH=/COMMIT_HASH=${FCI_COMMIT}/g" .env
        sed -i -e "s|SENTRY_DSN=|SENTRY_DSN=${SENTRY_DSN}|g" .env
        sed -i -e "s|SANDBOX=|SANDBOX=${ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS}|g" .env
        sed -i -e "s|SEGMENT_ANDROID_KEY=|SEGMENT_ANDROID_KEY=${SEGMENT_ANDROID_WRITE_KEY}|g" .env
        sed -i -e "s|SEGMENT_IOS_KEY=|SEGMENT_IOS_KEY=${SEGMENT_IOS_WRITE_KEY}|g" .env
    - &cancel_existing_builds_from_this_branch
      name: Cancelling all in-progress builds from this same branch
      script: |
        #!/usr/bin/env python3
        import os
        import requests
        import re

        PROJECT_ID = os.getenv('FCI_PROJECT_ID')
        BRANCH = os.getenv('FCI_BRANCH')
        BASE_URL = 'https://api.codemagic.io/'
        BUILD_ID = os.getenv('FCI_BUILD_ID')

        session = requests.Session()
        session.headers.update({'x-auth-token': os.getenv('CODEMAGIC_API_KEY')})

        response = session.get(
            f'{BASE_URL}builds?appId={PROJECT_ID}&branch={BRANCH}').json()

        for build in response['builds']:
          buildId = build['_id']
          status = build['status']
          if buildId != BUILD_ID:
            if status == 'building' or status == 'fetching' or status == 'publishing':
              response = session.post(f'{BASE_URL}builds/{buildId}/cancel')
              if response:
                print(f'Cancelled build: {buildId}')
              else:
                print(f'Failed to cancel build: {buildId}')
    - &prepare_release_notes_from_gitlab
      name: Preparing release notes from Gitlab tag
      script: |
        #!/usr/bin/env python3
        import os
        import requests
        import subprocess

        TAG = subprocess.check_output(['git', 'describe', '--tags', '--abbrev=0']).decode('ascii').strip()
        GITLAB_API_TOKEN = os.getenv('GITLAB_API_TOKEN')
        URL = "https://gitlab.wearespindle.com/api/v4/projects/105/releases/{tag}".format(tag=TAG)
        HEADERS = {'Content-Type': 'application/json', 'Private-Token': GITLAB_API_TOKEN}

        notes = requests.get(URL, headers=HEADERS).json()['description']
        f = open("release_notes.txt", "w")
        f.write(notes)
        f.close()
    - &prepare_release_notes_from_files
      name: Preparing the release notes from the release notes on the file system
      script: dart utils/ci/codemagic/prepare_release_notes.dart
    - &flutter_pub_get
      name: Installing flutter dependencies and generate code
      script: |
        flutter packages pub get
        flutter pub run build_runner build
        flutter pub run pigeon --input utils/pigeon/scheme.dart --dart_out lib/app/util/pigeon.dart --objc_header_out ios/Runner/pigeon.h --objc_source_out ios/Runner/pigeon.m --java_out android/app/src/main/java/com/voipgrid/vialer/Pigeon.java --java_package com.voipgrid.vialer
        # TODO: Remove this when FIL is published as a pub.dev package
        cd voip_flutter_integration
        flutter pub get
        flutter pub run build_runner build
        cd ..
    - &release_to_sentry
      name: Create a new release in Sentry
      script: |
        # Extract the Sentry version from file
        sentry_version=$(cat SENTRY_VERSION)
        if [ -z "$sentry_version" ]; then
          # Use Sentrys proposed version name as a fallback
          proposed_version=$(sentry-cli releases propose-version)
          sentry_version=$proposed_version
        fi

        # Report the new version to Sentry, include git commits and possibly finalize the release.
        # By finalizing the release Sentry issues marked as 'Resolved in next release' mean this
        # release.
        sentry-cli releases new "$sentry_version"
        sentry-cli releases set-commits "$sentry_version" --auto --ignore-missing
        if [ $FINALIZE_SENTRY_RELEASE = true ] ; then
          sentry-cli releases finalize "$sentry_version"
        fi
    - &flutter_test
      name: Running tests
      script: |
        flutter test
    - &build_aab
      name: Building app bundle (.aab) for Android #TODO: $TEST_SERVICE_ACCOUNT decoding is only temporary and should be removed when Codemagic has resolved their issue.
      script: |
        echo $TEST_SERVICE_ACCOUNT | base64 --decode > $TEST_SERVICE_ACCOUNT
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
        echo $ANDROID_FIREBASE_SECRET | base64 --decode > $FCI_BUILD_DIR/android/app/google-services.json
        echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
        flutter build appbundle --release --target=lib/app/main.dart --build-number=$PROJECT_BUILD_NUMBER -v --dart-define BRAND=$BRAND --dart-define SEGMENT_ANDROID_KEY=$SEGMENT_ANDROID_WRITE_KEY
    - &build_universal_apk_from_aab
      name: Building "Universal APK" (.apk) for Android
      script: |
        android-app-bundle build-universal-apk \
        --ks $FCI_KEYSTORE_PATH \
        --ks-pass $FCI_KEYSTORE_PASSWORD \
        --ks-key-alias $FCI_KEY_ALIAS \
        --key-pass $FCI_KEY_PASSWORD
    - &update_ios_signing_for_current_brand
      name: Updating iOS project files to use the appropriate signing information for the current brand
      script: |
        #!/usr/bin/env python3
        import os
        import re

        iosTeamId = os.getenv('IOS_TEAM_ID')
        iosBundleId = os.getenv('BUNDLE_ID')

        if not isinstance(iosTeamId, str) or not isinstance(iosBundleId, str):
          raise Exception("IOS_TEAM_ID and BUNDLE_ID environment variables must be set")

        FILE_PATH = "ios/Runner.xcodeproj/project.pbxproj"
        REPLACEMENTS = {
            iosTeamId: [
                "(DevelopmentTeam = )([A-Z0-9]+)(;)",
                "(DEVELOPMENT_TEAM = )([A-Z0-9]+)(;)",
            ],
            iosBundleId: [
                "(PRODUCT_BUNDLE_IDENTIFIER = )(.+)(;)",
            ]
        }

        pbxprojFile = open(FILE_PATH, "r")
        contents = "".join(pbxprojFile.readlines())
        pbxprojFile.close

        for replacement, candidates in REPLACEMENTS.items():
            for candidate in candidates:
                contents = re.sub(
                    r'' + candidate,
                    r'\1' + replacement + r'\3',
                    contents
                )


        pbxprojFile = open(FILE_PATH, "w")
        pbxprojFile.write("".join(contents))
        pbxprojFile.close
    - &build_ipa
      name: Building application (.ipa) for iOS
      script: |
        flutter pub get
        pod repo update
        export PATH="$PATH:/Users/builder/programs/flutter/bin/cache/dart-sdk/bin"
        cd ios/ && pod install && cd ..
        keychain initialize
        app-store-connect fetch-signing-files $BUNDLE_ID \
        --type $IOS_SIGNING_TYPE \
        --create
        keychain add-certificates
        xcode-project use-profiles
        flutter build ipa --release \
        --target=lib/app/main.dart \
        --export-options-plist=/Users/builder/export_options.plist \
        --build-number=$PROJECT_BUILD_NUMBER \
        --verbose \
        --dart-define BRAND=$BRAND \
        --dart-define SEGMENT_IOS_KEY=$SEGMENT_IOS_WRITE_KEY \
    - &update_gitlab_merge_request_with_build_url
      name: Updating the Merge Request in Gitlab with a link to this build
      script: |
        #!/usr/bin/env python3
        import os
        import requests
        import re

        MERGE_REQUEST_ID = os.getenv('GITLAB_MERGE_REQUEST_IID')
        GITLAB_API_TOKEN = os.getenv('GITLAB_API_TOKEN')
        BUILD_NUMBER = os.getenv('PROJECT_BUILD_NUMBER')
        PROJECT_ID = os.getenv('FCI_PROJECT_ID')
        BUILD_ID = os.getenv('FCI_BUILD_ID')
        URL = "https://gitlab.wearespindle.com/api/v4/projects/105/merge_requests/{mergeRequestId}".format(mergeRequestId=MERGE_REQUEST_ID)
        TEMPLATE = "[Codemagic: Latest Build ({buildNumber})](https://codemagic.io/app/{projectId}/build/{buildId})"
        HEADERS = {'Content-Type': 'application/json','Private-Token': GITLAB_API_TOKEN}

        if MERGE_REQUEST_ID is not None:
          message = TEMPLATE.format(buildNumber=BUILD_NUMBER, projectId=PROJECT_ID, buildId=BUILD_ID)
          regex = re.escape(message).replace(BUILD_NUMBER, '\d+').replace(PROJECT_ID, '[^)]+').replace(BUILD_ID, '[^)]+')
          currentDescription = requests.get(URL, headers=HEADERS).json()['description']
          newDescription = re.sub(regex, message, currentDescription)

          requests.put(URL, headers=HEADERS, json={
              'description': newDescription if currentDescription != newDescription else currentDescription + "\r\n\r\n" + message
          })
    - &set_testflight_release_notes_for_main
      name: Preparing "What to test" for TestFlight
      script: |
        echo '[{"language":"en-US","text":"Main"},{"language":"nl-NL","text":"Main"}]' > release_notes.json
  config: &config # Default configuration that can be applied to all normal workflows
    max_build_duration: 60
    instance_type: mac_pro
    environment: &config_environment
      flutter: 2.8.0
      xcode: latest
      cocoapods: 1.11.2
  brand_config: # Specific configuration that should be applied to a workflow when building for this brand
    voys_env_vars: &brand_config_voys_env_vars
      BRAND: voys
      BUNDLE_ID: "com.voys.app"
    vialer_env_vars: &brand_config_vialer_env_vars
      BRAND: vialer
      BUNDLE_ID: "com.voipgrid.vialer"
    staging_env_vars: &brand_config_staging_env_vars
      BRAND: vialerStaging
      BUNDLE_ID: "com.voipgrid.vialer"
  defaults: # Default sections that can be reused between workflows to cover common use-cases
    cache: &defaults_cache
      cache_paths:
        - $HOME/.pub-cache
        - $HOME/Library/Caches/CocoaPods
        - $HOME/.gradle/caches
    artifacts: &defaults_artifacts
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log

    production_trigger: &production_was_tagged
      events:
        - tag
      tag_patterns:
        - pattern: '^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'
          include: true

    beta_trigger: &beta_was_tagged
      events:
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: main
          include: true
          source: false
      tag_patterns:
        - pattern: '*beta*'
          include: true

    publish_for_qa: &publish_for_qa
      slack:
        channel: '#vialer_mobile_ci'
        notify_on_build_start: true
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        beta_groups:
          - QA
      firebase:
        firebase_token: $FIREBASE_TOKEN
        android:
          artifact_type: 'aab'
          app_id: $FIREBASE_APP_ID
          groups:
            - qa
      google_play:
        credentials: $TEST_SERVICE_ACCOUNT
        track: QA
        in_app_update_priority: 0

    publish_for_beta: &publish_for_beta
      slack:
        channel: '#vialer_mobile_releases'
        notify_on_build_start: false
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        beta_groups:
          - Beta Testers
          - External Testers
      firebase:
        firebase_token: $FIREBASE_TOKEN
        android:
          artifact_type: 'aab'
          app_id: $FIREBASE_APP_ID
          groups:
            - beta
      google_play:
        credentials: $TEST_SERVICE_ACCOUNT
        track: beta
        in_app_update_priority: 0

    publish_for_production: &publish_for_production
      slack:
        channel: '#vialer_mobile_releases'
        notify_on_build_start: false
      google_play:
        credentials: $TEST_SERVICE_ACCOUNT
        track: production
        in_app_update_priority: 0
        rollout_fraction: 0.05

workflows:
  main: &main_workflow
    name: main
    <<: *config
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_vialer_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_DEVELOPMENT"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "true"
        FINALIZE_SENTRY_RELEASE: "false"
    triggering:
      cancel_previous_builds: true
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
    cache: *defaults_cache
    scripts:
      - *set_up_env_file
      - *set_version_string_to_most_recent_tag
      - *flutter_pub_get
      - *analyze
      - *flutter_test
      - *build_aab
      - *build_universal_apk_from_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *set_testflight_release_notes_for_main
      - *release_to_sentry
    artifacts: *defaults_artifacts

  main-with-qa-publishing:
    <<: *main_workflow
    name: main with QA publishing
    triggering:
      cancel_previous_builds: true
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_vialer_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_STORE"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
        FINALIZE_SENTRY_RELEASE: "false"
    publishing:
      <<: *publish_for_qa

  merge-requests:
    name: merge requests
    <<: *config
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_playstore_credentials
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_vialer_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_DEVELOPMENT"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "true"
        FINALIZE_SENTRY_RELEASE: "false"
    cache: *defaults_cache
    scripts:
      - *cancel_existing_builds_from_this_branch
      - *set_up_env_file
      - *set_version_string_for_merge_request
      - *flutter_pub_get
      - *analyze
      - *flutter_test
      - *build_aab
      - *build_universal_apk_from_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *update_gitlab_merge_request_with_build_url
      - *release_to_sentry
    artifacts: *defaults_artifacts
    publishing:
      slack:
        channel: '#vialer_mobile_ci'
        notify_on_build_start: false
        notify:
          success: true
          failure: false

  staging:
    name: Staging
    <<: *main_workflow
    triggering:
      events:
        - tag
      branch_patterns:
        - pattern: main
          include: true
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_staging_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_DEVELOPMENT"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "true"
        FINALIZE_SENTRY_RELEASE: "false"

  production-vialer: &production_workflow
    name: Release Vialer to Production
    <<: *config
    environment:
      groups:
        - configuration
        - production_diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_vialer_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_STORE"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
        FINALIZE_SENTRY_RELEASE: "true"
    triggering: *production_was_tagged
    cache: *defaults_cache
    artifacts: *defaults_artifacts
    scripts:
      - *set_up_env_file
      - *set_version_string
      - *flutter_pub_get
      - *analyze
      - *prepare_release_notes_from_files
      - *flutter_test
      - *build_aab
      - *build_universal_apk_from_aab
      #- *release_to_sentry
    #publishing: *publish_for_production

  production-voys:
    name: Release Voys to Production
    <<: *production_workflow
    environment:
      groups:
        - configuration
        - production_diagnostics
        - voys_android_firebase
        - voys_playstore_credentials
        - voys_upload_keystore_credentials
        - voys_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_voys_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_STORE"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
        FINALIZE_SENTRY_RELEASE: "true"

  beta-vialer: &beta_workflow
    name: Vialer Beta
    <<: *config
    environment:
      groups:
        - configuration
        - diagnostics
        - vialer_android_firebase
        - vialer_upload_keystore_credentials
        - vialer_playstore_credentials
        - vialer_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_vialer_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_STORE"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
        FINALIZE_SENTRY_RELEASE: "true"
    cache: *defaults_cache
    artifacts: *defaults_artifacts
    triggering: *beta_was_tagged
    scripts:
      - *set_up_env_file
      - *set_version_string
      - *flutter_pub_get
      - *analyze
      - *prepare_release_notes_from_files
      - *flutter_test
      - *build_aab
      - *update_ios_signing_for_current_brand
      - *build_ipa
      - *release_to_sentry
    publishing: *publish_for_beta

  beta-voys:
    name: Voys Beta
    <<: *beta_workflow
    environment:
      groups:
        - configuration
        - diagnostics
        - voys_android_firebase
        - voys_playstore_credentials
        - voys_upload_keystore_credentials
        - voys_ios_appstore_credentials
      <<: *config_environment
      vars:
        <<: *brand_config_voys_env_vars
        IOS_SIGNING_TYPE: "IOS_APP_STORE"
        ENABLE_IOS_SANDBOX_PUSH_NOTIFICATIONS: "false"
        FINALIZE_SENTRY_RELEASE: "true"